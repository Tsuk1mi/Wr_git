{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/max22/WebstormProjects/weatherwear/src/app/api/weather/forecast/%5BcityId%5D/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport type { WeatherData } from '@/types';\n\n// OpenWeatherMap API ключ\nconst API_KEY = process.env.OPENWEATHER_API_KEY || 'f34e61eb7108bf62fb3ed7e7e9a37aaa'; // Используем публичный API ключ для тестирования\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { cityId: string } }\n) {\n  const cityId = params.cityId;\n  const searchParams = request.nextUrl.searchParams;\n  const days = Number.parseInt(searchParams.get('days') || '5', 10);\n\n  try {\n    // Запрос 5-дневного прогноза из OpenWeatherMap API (по 3 часа)\n    const forecastResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&appid=${API_KEY}&units=metric&lang=ru`\n    );\n\n    if (!forecastResponse.ok) {\n      throw new Error(`OpenWeatherMap API вернул статус: ${forecastResponse.status}`);\n    }\n\n    const openWeatherData = await forecastResponse.json();\n\n    // Группируем данные по дням (до указанного количества дней)\n    const dailyForecasts = groupForecastByDay(openWeatherData.list);\n    const limitedForecasts = dailyForecasts.slice(0, days);\n\n    // Преобразуем данные из OpenWeatherMap API в наш формат\n    const forecastData: WeatherData[] = limitedForecasts.map(dayForecast => {\n      // Используем прогноз на полдень (или ближайшее доступное время)\n      const midDayForecast = dayForecast.find(item =>\n        item.dt_txt.includes('12:00:00')\n      ) || dayForecast[Math.floor(dayForecast.length / 2)];\n\n      return {\n        temperature: {\n          air: {\n            C: Math.round(midDayForecast.main.temp),\n            F: Math.round((midDayForecast.main.temp * 9/5) + 32),\n          },\n          comfort: {\n            C: Math.round(midDayForecast.main.feels_like),\n            F: Math.round((midDayForecast.main.feels_like * 9/5) + 32),\n          },\n        },\n        humidity: midDayForecast.main.humidity,\n        precipitation: {\n          type: getPrecipitationType(midDayForecast.weather[0].id),\n          intensity: getPrecipitationIntensity(midDayForecast.weather[0].id),\n        },\n        wind: {\n          speed: midDayForecast.wind.speed,\n          direction: getWindDirection(midDayForecast.wind.deg),\n        },\n        pressure: {\n          mm: Math.round(midDayForecast.main.pressure * 0.750062),\n          hpa: midDayForecast.main.pressure,\n        },\n        uv_index: 3, // OpenWeatherMap базовый API не предоставляет УФ-индекс\n        phenomena: {\n          fog: midDayForecast.weather[0].id >= 700 && midDayForecast.weather[0].id < 800,\n          thunder: midDayForecast.weather[0].id >= 200 && midDayForecast.weather[0].id < 300,\n          cloudy: midDayForecast.clouds.all,\n        },\n        description: midDayForecast.weather[0].description,\n        date: midDayForecast.dt_txt.split(' ')[0],\n      };\n    });\n\n    return NextResponse.json(forecastData);\n  } catch (error) {\n    console.error('Ошибка при получении прогноза погоды:', error);\n\n    // В случае ошибки, возвращаем мок данных прогноза\n    const forecastData: WeatherData[] = [];\n\n    for (let i = 0; i < days; i++) {\n      // Генерируем дату (сегодня + i дней)\n      const date = new Date();\n      date.setDate(date.getDate() + i);\n      const dateStr = date.toISOString().split('T')[0];\n\n      forecastData.push({\n        temperature: {\n          air: {\n            C: 15 + i,\n            F: 59 + i * 2,\n          },\n          comfort: {\n            C: 13 + i,\n            F: 55 + i * 2,\n          },\n        },\n        humidity: 65,\n        precipitation: {\n          type: i % 3 === 0 ? 'rain' : 'none',\n          intensity: i % 3 === 0 ? 1 : 0,\n        },\n        wind: {\n          speed: 3.5,\n          direction: 'северо-западный',\n        },\n        pressure: {\n          mm: 750,\n          hpa: 1000,\n        },\n        uv_index: 3,\n        phenomena: {\n          fog: false,\n          thunder: false,\n          cloudy: 50,\n        },\n        date: dateStr,\n        description: 'Нет данных (использованы резервные)',\n      });\n    }\n\n    return NextResponse.json(forecastData);\n  }\n}\n\n// Вспомогательные функции\n\nfunction groupForecastByDay(forecastList: any[]): any[][] {\n  const days: { [key: string]: any[] } = {};\n\n  forecastList.forEach(item => {\n    const date = item.dt_txt.split(' ')[0];\n    if (!days[date]) {\n      days[date] = [];\n    }\n    days[date].push(item);\n  });\n\n  return Object.values(days);\n}\n\nfunction getPrecipitationType(weatherId: number): 'rain' | 'snow' | 'drizzle' | 'none' {\n  if (weatherId >= 200 && weatherId < 600) {\n    if (weatherId >= 300 && weatherId < 400) {\n      return 'drizzle';\n    } else if (weatherId >= 500 && weatherId < 600) {\n      return 'rain';\n    } else if (weatherId >= 600 && weatherId < 700) {\n      return 'snow';\n    }\n    return 'rain';\n  }\n  return 'none';\n}\n\nfunction getPrecipitationIntensity(weatherId: number): number {\n  if (weatherId >= 500 && weatherId < 510) {\n    const intensity = weatherId - 500;\n    return Math.min(intensity / 2, 3); // Нормализуем до шкалы 0-3\n  }\n  if (weatherId >= 600 && weatherId < 610) {\n    const intensity = weatherId - 600;\n    return Math.min(intensity / 2, 3);\n  }\n  return 0;\n}\n\nfunction getWindDirection(degrees: number): string {\n  const directions = [\n    'северный', 'северо-восточный', 'восточный', 'юго-восточный',\n    'южный', 'юго-западный', 'западный', 'северо-западный'\n  ];\n  return directions[Math.round(degrees / 45) % 8];\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}