{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Snowman/WebstormProjects/Wr_git/src/app/api/weather/forecast/%5BcityId%5D/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\r\nimport type { WeatherData } from '@/types';\r\n\r\nexport const dynamic = 'force-dynamic'; // ✅ важно для корректной работы параметров\r\n\r\nconst API_KEY = process.env.OPENWEATHER_API_KEY || 'c4b2992878138ac1210bc925ac188097';\r\n\r\nexport async function GET(request: NextRequest, context: { params: { cityId: string } }) {\r\n  // Нужно дождаться, чтобы параметры загрузились, прежде чем их использовать\r\n  const { cityId } = await context.params; // Ждем, пока параметры загрузятся асинхронно\r\n  const searchParams = request.nextUrl.searchParams;\r\n  const days = Number.parseInt(searchParams.get('days') || '5', 10);\r\n\r\n  try {\r\n    const forecastResponse = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&appid=${API_KEY}&units=metric&lang=ru`\r\n    );\r\n\r\n    if (!forecastResponse.ok) {\r\n      throw new Error(`OpenWeatherMap API вернул статус: ${forecastResponse.status}`);\r\n    }\r\n\r\n    const openWeatherData = await forecastResponse.json();\r\n\r\n    const dailyForecasts = groupForecastByDay(openWeatherData.list);\r\n    const limitedForecasts = dailyForecasts.slice(0, days);\r\n\r\n    const forecastData: WeatherData[] = limitedForecasts.map(dayForecast => {\r\n      const midDayForecast = dayForecast.find(item =>\r\n          item.dt_txt.includes('12:00:00')\r\n      ) || dayForecast[Math.floor(dayForecast.length / 2)];\r\n\r\n      return {\r\n        temperature: {\r\n          air: {\r\n            C: Math.round(midDayForecast.main.temp),\r\n            F: Math.round((midDayForecast.main.temp * 9) / 5 + 32),\r\n          },\r\n          comfort: {\r\n            C: Math.round(midDayForecast.main.feels_like),\r\n            F: Math.round((midDayForecast.main.feels_like * 9) / 5 + 32),\r\n          },\r\n        },\r\n        humidity: midDayForecast.main.humidity,\r\n        precipitation: {\r\n          type: getPrecipitationType(midDayForecast.weather[0].id),\r\n          intensity: getPrecipitationIntensity(midDayForecast.weather[0].id),\r\n        },\r\n        wind: {\r\n          speed: midDayForecast.wind.speed,\r\n          direction: getWindDirection(midDayForecast.wind.deg),\r\n        },\r\n        pressure: {\r\n          mm: Math.round(midDayForecast.main.pressure * 0.750062),\r\n          hpa: midDayForecast.main.pressure,\r\n        },\r\n        uv_index: 3,\r\n        phenomena: {\r\n          fog: midDayForecast.weather[0].id >= 700 && midDayForecast.weather[0].id < 800,\r\n          thunder: midDayForecast.weather[0].id >= 200 && midDayForecast.weather[0].id < 300,\r\n          cloudy: midDayForecast.clouds.all,\r\n        },\r\n        description: midDayForecast.weather[0].description,\r\n        date: midDayForecast.dt_txt.split(' ')[0],\r\n      };\r\n    });\r\n\r\n    return NextResponse.json(forecastData);\r\n  } catch (error) {\r\n    console.error('Ошибка при получении прогноза погоды:', error);\r\n\r\n    const forecastData: WeatherData[] = [];\r\n\r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() + i);\r\n      const dateStr = date.toISOString().split('T')[0];\r\n\r\n      forecastData.push({\r\n        temperature: {\r\n          air: { C: 15 + i, F: 59 + i * 2 },\r\n          comfort: { C: 13 + i, F: 55 + i * 2 },\r\n        },\r\n        humidity: 65,\r\n        precipitation: {\r\n          type: i % 3 === 0 ? 'rain' : 'none',\r\n          intensity: i % 3 === 0 ? 1 : 0,\r\n        },\r\n        wind: {\r\n          speed: 3.5,\r\n          direction: 'северо-западный',\r\n        },\r\n        pressure: {\r\n          mm: 750,\r\n          hpa: 1000,\r\n        },\r\n        uv_index: 3,\r\n        phenomena: {\r\n          fog: false,\r\n          thunder: false,\r\n          cloudy: 50,\r\n        },\r\n        date: dateStr,\r\n        description: 'Нет данных (использованы резервные)',\r\n      });\r\n    }\r\n\r\n    return NextResponse.json(forecastData);\r\n  }\r\n}\r\n\r\n// Вспомогательные функции\r\n\r\nfunction groupForecastByDay(forecastList: any[]): any[][] {\r\n  const days: { [key: string]: any[] } = {};\r\n\r\n  forecastList.forEach(item => {\r\n    const date = item.dt_txt.split(' ')[0];\r\n    if (!days[date]) {\r\n      days[date] = [];\r\n    }\r\n    days[date].push(item);\r\n  });\r\n\r\n  return Object.values(days);\r\n}\r\n\r\nfunction getPrecipitationType(weatherId: number): 'rain' | 'snow' | 'drizzle' | 'none' {\r\n  if (weatherId >= 300 && weatherId < 400) return 'drizzle';\r\n  if (weatherId >= 500 && weatherId < 600) return 'rain';\r\n  if (weatherId >= 600 && weatherId < 700) return 'snow';\r\n  return 'none';\r\n}\r\n\r\nfunction getPrecipitationIntensity(weatherId: number): number {\r\n  if (weatherId >= 500 && weatherId < 510) return Math.min((weatherId - 500) / 2, 3);\r\n  if (weatherId >= 600 && weatherId < 610) return Math.min((weatherId - 600) / 2, 3);\r\n  return 0;\r\n}\r\n\r\nfunction getWindDirection(degrees: number): string {\r\n  const directions = [\r\n    'северный', 'северо-восточный', 'восточный', 'юго-восточный',\r\n    'южный', 'юго-западный', 'западный', 'северо-западный'\r\n  ];\r\n  return directions[Math.round(degrees / 45) % 8];\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAGO,MAAM,UAAU,iBAAiB,2CAA2C;AAEnF,MAAM,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI;AAE5C,eAAe,IAAI,OAAoB,EAAE,OAAuC;IACrF,2EAA2E;IAC3E,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,MAAM,EAAE,6CAA6C;IACtF,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;IACjD,MAAM,OAAO,OAAO,QAAQ,CAAC,aAAa,GAAG,CAAC,WAAW,KAAK;IAE9D,IAAI;QACF,MAAM,mBAAmB,MAAM,MAC3B,CAAC,oDAAoD,EAAE,OAAO,OAAO,EAAE,QAAQ,qBAAqB,CAAC;QAGzG,IAAI,CAAC,iBAAiB,EAAE,EAAE;YACxB,MAAM,IAAI,MAAM,CAAC,kCAAkC,EAAE,iBAAiB,MAAM,EAAE;QAChF;QAEA,MAAM,kBAAkB,MAAM,iBAAiB,IAAI;QAEnD,MAAM,iBAAiB,mBAAmB,gBAAgB,IAAI;QAC9D,MAAM,mBAAmB,eAAe,KAAK,CAAC,GAAG;QAEjD,MAAM,eAA8B,iBAAiB,GAAG,CAAC,CAAA;YACvD,MAAM,iBAAiB,YAAY,IAAI,CAAC,CAAA,OACpC,KAAK,MAAM,CAAC,QAAQ,CAAC,gBACpB,WAAW,CAAC,KAAK,KAAK,CAAC,YAAY,MAAM,GAAG,GAAG;YAEpD,OAAO;gBACL,aAAa;oBACX,KAAK;wBACH,GAAG,KAAK,KAAK,CAAC,eAAe,IAAI,CAAC,IAAI;wBACtC,GAAG,KAAK,KAAK,CAAC,AAAC,eAAe,IAAI,CAAC,IAAI,GAAG,IAAK,IAAI;oBACrD;oBACA,SAAS;wBACP,GAAG,KAAK,KAAK,CAAC,eAAe,IAAI,CAAC,UAAU;wBAC5C,GAAG,KAAK,KAAK,CAAC,AAAC,eAAe,IAAI,CAAC,UAAU,GAAG,IAAK,IAAI;oBAC3D;gBACF;gBACA,UAAU,eAAe,IAAI,CAAC,QAAQ;gBACtC,eAAe;oBACb,MAAM,qBAAqB,eAAe,OAAO,CAAC,EAAE,CAAC,EAAE;oBACvD,WAAW,0BAA0B,eAAe,OAAO,CAAC,EAAE,CAAC,EAAE;gBACnE;gBACA,MAAM;oBACJ,OAAO,eAAe,IAAI,CAAC,KAAK;oBAChC,WAAW,iBAAiB,eAAe,IAAI,CAAC,GAAG;gBACrD;gBACA,UAAU;oBACR,IAAI,KAAK,KAAK,CAAC,eAAe,IAAI,CAAC,QAAQ,GAAG;oBAC9C,KAAK,eAAe,IAAI,CAAC,QAAQ;gBACnC;gBACA,UAAU;gBACV,WAAW;oBACT,KAAK,eAAe,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,OAAO,eAAe,OAAO,CAAC,EAAE,CAAC,EAAE,GAAG;oBAC3E,SAAS,eAAe,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,OAAO,eAAe,OAAO,CAAC,EAAE,CAAC,EAAE,GAAG;oBAC/E,QAAQ,eAAe,MAAM,CAAC,GAAG;gBACnC;gBACA,aAAa,eAAe,OAAO,CAAC,EAAE,CAAC,WAAW;gBAClD,MAAM,eAAe,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAC3C;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QAEvD,MAAM,eAA8B,EAAE;QAEtC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;YAC7B,MAAM,OAAO,IAAI;YACjB,KAAK,OAAO,CAAC,KAAK,OAAO,KAAK;YAC9B,MAAM,UAAU,KAAK,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YAEhD,aAAa,IAAI,CAAC;gBAChB,aAAa;oBACX,KAAK;wBAAE,GAAG,KAAK;wBAAG,GAAG,KAAK,IAAI;oBAAE;oBAChC,SAAS;wBAAE,GAAG,KAAK;wBAAG,GAAG,KAAK,IAAI;oBAAE;gBACtC;gBACA,UAAU;gBACV,eAAe;oBACb,MAAM,IAAI,MAAM,IAAI,SAAS;oBAC7B,WAAW,IAAI,MAAM,IAAI,IAAI;gBAC/B;gBACA,MAAM;oBACJ,OAAO;oBACP,WAAW;gBACb;gBACA,UAAU;oBACR,IAAI;oBACJ,KAAK;gBACP;gBACA,UAAU;gBACV,WAAW;oBACT,KAAK;oBACL,SAAS;oBACT,QAAQ;gBACV;gBACA,MAAM;gBACN,aAAa;YACf;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B;AACF;AAEA,0BAA0B;AAE1B,SAAS,mBAAmB,YAAmB;IAC7C,MAAM,OAAiC,CAAC;IAExC,aAAa,OAAO,CAAC,CAAA;QACnB,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACtC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,EAAE;QACjB;QACA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAClB;IAEA,OAAO,OAAO,MAAM,CAAC;AACvB;AAEA,SAAS,qBAAqB,SAAiB;IAC7C,IAAI,aAAa,OAAO,YAAY,KAAK,OAAO;IAChD,IAAI,aAAa,OAAO,YAAY,KAAK,OAAO;IAChD,IAAI,aAAa,OAAO,YAAY,KAAK,OAAO;IAChD,OAAO;AACT;AAEA,SAAS,0BAA0B,SAAiB;IAClD,IAAI,aAAa,OAAO,YAAY,KAAK,OAAO,KAAK,GAAG,CAAC,CAAC,YAAY,GAAG,IAAI,GAAG;IAChF,IAAI,aAAa,OAAO,YAAY,KAAK,OAAO,KAAK,GAAG,CAAC,CAAC,YAAY,GAAG,IAAI,GAAG;IAChF,OAAO;AACT;AAEA,SAAS,iBAAiB,OAAe;IACvC,MAAM,aAAa;QACjB;QAAY;QAAoB;QAAa;QAC7C;QAAS;QAAgB;QAAY;KACtC;IACD,OAAO,UAAU,CAAC,KAAK,KAAK,CAAC,UAAU,MAAM,EAAE;AACjD","debugId":null}}]
}