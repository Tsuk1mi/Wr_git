{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/max22/WebstormProjects/weatherwear/src/app/api/weather/current/%5BcityId%5D/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport type { WeatherData } from '@/types';\n\n// OpenWeatherMap API ключ\nconst API_KEY = process.env.OPENWEATHER_API_KEY || 'f34e61eb7108bf62fb3ed7e7e9a37aaa'; // Используем публичный API ключ для тестирования\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { cityId: string } }\n) {\n  const cityId = params.cityId;\n\n  try {\n    // Запрос текущей погоды из OpenWeatherMap API\n    const weatherResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?id=${cityId}&appid=${API_KEY}&units=metric&lang=ru`\n    );\n\n    if (!weatherResponse.ok) {\n      throw new Error(`OpenWeatherMap API вернул статус: ${weatherResponse.status}`);\n    }\n\n    const openWeatherData = await weatherResponse.json();\n\n    // Преобразуем данные из OpenWeatherMap API в наш формат\n    const weatherData: WeatherData = {\n      temperature: {\n        air: {\n          C: Math.round(openWeatherData.main.temp),\n          F: Math.round((openWeatherData.main.temp * 9/5) + 32),\n        },\n        comfort: {\n          C: Math.round(openWeatherData.main.feels_like),\n          F: Math.round((openWeatherData.main.feels_like * 9/5) + 32),\n        },\n      },\n      humidity: openWeatherData.main.humidity,\n      precipitation: {\n        type: getPrecipitationType(openWeatherData.weather[0].id),\n        intensity: getPrecipitationIntensity(openWeatherData.weather[0].id),\n      },\n      wind: {\n        speed: openWeatherData.wind.speed,\n        direction: getWindDirection(openWeatherData.wind.deg),\n      },\n      pressure: {\n        mm: Math.round(openWeatherData.main.pressure * 0.750062),\n        hpa: openWeatherData.main.pressure,\n      },\n      uv_index: 3, // OpenWeatherMap базовый API не предоставляет УФ-индекс\n      phenomena: {\n        fog: openWeatherData.weather[0].id >= 700 && openWeatherData.weather[0].id < 800,\n        thunder: openWeatherData.weather[0].id >= 200 && openWeatherData.weather[0].id < 300,\n        cloudy: getCloudiness(openWeatherData.clouds.all),\n      },\n      description: openWeatherData.weather[0].description,\n    };\n\n    return NextResponse.json(weatherData);\n  } catch (error) {\n    console.error('Ошибка при получении данных о погоде:', error);\n\n    // В случае ошибки, возвращаем мок данных с сообщением об ошибке\n    const mockWeatherData: WeatherData = {\n      temperature: {\n        air: {\n          C: 15,\n          F: 59,\n        },\n        comfort: {\n          C: 13,\n          F: 55,\n        },\n      },\n      humidity: 65,\n      precipitation: {\n        type: 'none',\n        intensity: 0,\n      },\n      wind: {\n        speed: 3.5,\n        direction: 'северо-западный',\n      },\n      pressure: {\n        mm: 750,\n        hpa: 1000,\n      },\n      uv_index: 3,\n      phenomena: {\n        fog: false,\n        thunder: false,\n        cloudy: 50,\n      },\n      description: 'Ошибка получения данных, используется резервный прогноз',\n    };\n\n    return NextResponse.json(mockWeatherData);\n  }\n}\n\n// Вспомогательные функции для преобразования данных\n\nfunction getPrecipitationType(weatherId: number): 'rain' | 'snow' | 'drizzle' | 'none' {\n  if (weatherId >= 200 && weatherId < 600) {\n    if (weatherId >= 300 && weatherId < 400) {\n      return 'drizzle';\n    } else if (weatherId >= 500 && weatherId < 600) {\n      return 'rain';\n    } else if (weatherId >= 600 && weatherId < 700) {\n      return 'snow';\n    }\n    return 'rain';\n  }\n  return 'none';\n}\n\nfunction getPrecipitationIntensity(weatherId: number): number {\n  if (weatherId >= 500 && weatherId < 510) {\n    const intensity = weatherId - 500;\n    return Math.min(intensity / 2, 3); // Нормализуем до шкалы 0-3\n  }\n  if (weatherId >= 600 && weatherId < 610) {\n    const intensity = weatherId - 600;\n    return Math.min(intensity / 2, 3);\n  }\n  return 0;\n}\n\nfunction getWindDirection(degrees: number): string {\n  const directions = [\n    'северный', 'северо-восточный', 'восточный', 'юго-восточный',\n    'южный', 'юго-западный', 'западный', 'северо-западный'\n  ];\n  return directions[Math.round(degrees / 45) % 8];\n}\n\nfunction getCloudiness(cloudPercent: number): number {\n  return cloudPercent;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}