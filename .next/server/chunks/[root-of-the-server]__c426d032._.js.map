{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/max22/WebstormProjects/weatherwear/src/app/api/weather/current/coordinates/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\n\n/**\n * API-маршрут для получения текущей погоды по координатам\n * @param request - Запрос с параметрами lat (широта) и lon (долгота)\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Получаем параметры запроса\n    const searchParams = request.nextUrl.searchParams;\n    const lat = searchParams.get('lat');\n    const lon = searchParams.get('lon');\n    const redirect = searchParams.get('redirect') === 'true';\n\n    // Проверяем наличие обязательных параметров\n    if (!lat || !lon) {\n      return NextResponse.json(\n        { error: 'Требуются параметры lat и lon' },\n        { status: 400 }\n      );\n    }\n\n    // Формируем URL для запроса к бэкенду\n    const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n    const response = await fetch(`${apiUrl}/weather?lat=${lat}&lon=${lon}`);\n\n    // Если ответ от бэкенд-сервиса не успешный\n    if (!response.ok) {\n      const errorData = await response.json();\n      return NextResponse.json(\n        { error: errorData.message || 'Ошибка получения данных о погоде' },\n        { status: response.status }\n      );\n    }\n\n    // Обрабатываем данные\n    const data = await response.json();\n\n    // Если запрошено перенаправление, перенаправляем на страницу погоды для найденного города\n    if (redirect && data && data.id) {\n      return NextResponse.redirect(new URL(`/weather/${data.id}`, request.nextUrl.origin));\n    }\n\n    // В противном случае возвращаем данные как JSON\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('Ошибка при получении погоды по координатам:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAMO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,6BAA6B;QAC7B,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM,MAAM,aAAa,GAAG,CAAC;QAC7B,MAAM,MAAM,aAAa,GAAG,CAAC;QAC7B,MAAM,WAAW,aAAa,GAAG,CAAC,gBAAgB;QAElD,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,KAAK;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,SAAS,6DAAmC;QAClD,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,aAAa,EAAE,IAAI,KAAK,EAAE,KAAK;QAEtE,2CAA2C;QAC3C,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,UAAU,OAAO,IAAI;YAAmC,GACjE;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,sBAAsB;QACtB,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,0FAA0F;QAC1F,IAAI,YAAY,QAAQ,KAAK,EAAE,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,OAAO,CAAC,MAAM;QACpF;QAEA,gDAAgD;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}